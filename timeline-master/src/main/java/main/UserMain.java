package main;

//import main.MainMenu;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.sql.SQLException;

import javafx.application.Application;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ContentDisplay;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.FontWeight;
import javafx.scene.text.TextAlignment;
import userHandling.User;
import userHandling.UserHandler;
//import main.MainMenu;
/**
 * @authors Melker Fält, 
 * @date 2020-04-21
 */
public class UserMain
{
	private static int fieldWidth = 225; //The primary length used for fields.
	private static int fieldHeight = 35; //The primary height used for fields.
	private static String cssStyle = "-fx-border-color: #000000; -fx-border-width: 0.5px; -fx-background-color: #FFFFFF;"
			+ "-fx-text-inner-color: #808080;";
	private static int isLogged=0;
	private static int isAdmin=0;
	private static String currentUserName;
	private static int UserID;

	public static void setIsLogged(int isLoggedStatus){
	    isLogged=isLoggedStatus;
    }
    public static void setIsAdmin(int isAdminStatus){
        isAdmin=isAdminStatus;
    }

    public static int getIsLogged(){
	    return isLogged;
    }
    public static int getIsAdmin(){
	    return isAdmin;
    }

    public static void setUserID (int ID){
	    UserID =ID;
    }
    public static int getUserID(){
	    return UserID;
    }
    
    public static void setCurrentUserName(String username) {
    	currentUserName = username;
    }
    public static String getCurrentUserName() {
    	return currentUserName;
    }
	
	public static Scene viewAccountCreator() throws FileNotFoundException {
		/* Title label */
		Label title = new Label("Timeline Manager");
		title.setFont(Font.font("Open Sans", FontWeight.EXTRA_BOLD, FontPosture.REGULAR, 22));
		
		/* Labels and TextFields */
		Label menuModeLabel = new Label("Sign in"); //Displays the current menu mode (sign in / sign up).
		menuModeLabel.setFont(Font.font("Open Sans", FontWeight.EXTRA_BOLD, FontPosture.REGULAR, 30));
		
		Label orLabel = new Label("Or");
		orLabel.setFont(Font.font("Open Sans", FontWeight.NORMAL, FontPosture.ITALIC,12));
		
		TextField userNameInput = new TextField();
		userNameInput.setFont(Font.font("Open Sans", FontWeight.EXTRA_BOLD,12));
		userNameInput.setPrefSize(fieldWidth, fieldHeight);
		userNameInput.setStyle(cssStyle);
		userNameInput.setPromptText("Username");
		
		PasswordField passwordInput = new PasswordField();
		passwordInput.setFont(Font.font("Open Sans", FontWeight.EXTRA_BOLD,12));
		passwordInput.setPrefSize(fieldWidth, fieldHeight);
		passwordInput.setStyle(cssStyle);
		passwordInput.setPromptText("Password");
		
		PasswordField repeatedPasswordInput = new PasswordField();
		repeatedPasswordInput.setFont(Font.font("Open Sans", FontWeight.EXTRA_BOLD,12));
		repeatedPasswordInput.setPrefSize(fieldWidth, fieldHeight);
		repeatedPasswordInput.setStyle(cssStyle);
		repeatedPasswordInput.setPromptText("Repeat password");
		
		TextField emailInput = new TextField();
		emailInput.setFont(Font.font("Open Sans", FontWeight.EXTRA_BOLD,12));
		emailInput.setPrefSize(fieldWidth, fieldHeight);
		emailInput.setStyle(cssStyle);
		emailInput.setPromptText("Email");
		
		/* Messages generated by program */
        Label messages = new Label();
        messages.setFont(Font.font("Times new Roman",FontWeight.BOLD,FontPosture.ITALIC,14));
        messages.setPadding(new Insets(20,20,20,20));
        messages.setWrapText(true);
		
		/* Images */
		Image timelineLogo = new Image(new FileInputStream("graphic/tsiwira.png"));
		ImageView logoIV = new ImageView(timelineLogo);
		logoIV.setFitHeight(75);
		logoIV.setFitWidth(75);
		
		/* Buttons */
		Button signInBtn = new Button("Sign in");
		signInBtn.setFont(Font.font("Open Sans", FontWeight.NORMAL,12));
		signInBtn.setPrefSize(fieldWidth, fieldHeight);
		signInBtn.setStyle(cssStyle);
		
		Button signUpBtn = new Button("Sign up");
		signUpBtn.setFont(Font.font("Open Sans", FontWeight.NORMAL,12));
		signUpBtn.setPrefSize(fieldWidth, fieldHeight);
		signUpBtn.setStyle(cssStyle);
		
		Button registerBtn = new Button("Register");
		registerBtn.setFont(Font.font("Open Sans", FontWeight.NORMAL,12));
		registerBtn.setStyle(cssStyle);
		registerBtn.setPrefSize(fieldWidth, fieldHeight);
	
		Button loginBtn = new Button("Login");
		loginBtn.setFont(Font.font("Open Sans", FontWeight.NORMAL,12));
		loginBtn.setPrefSize(100, fieldHeight);
		loginBtn.setStyle(cssStyle);
		
		Button mainMenuBtn = new Button();
		mainMenuBtn.setGraphic(logoIV);
		mainMenuBtn.setStyle("-fx-background-color: #587dd1");
		
		/* Lines */
		Line leftLine = new Line();
		leftLine.setStyle("-fx-stroke: #D3D3D3");
		leftLine.setStartX(0.0f);
		leftLine.setStartY(0.0f);
		leftLine.setEndX(95.0f);
		leftLine.setEndY(0.0f);
		
		Line rightLine = new Line();
		rightLine.setStyle("-fx-stroke: #D3D3D3");
		rightLine.setStartX(0.0f);
		rightLine.setStartY(0.0f);
		rightLine.setEndX(95.0f);
		rightLine.setEndY(0.0f);
		
		/* GridPane with text fields for registration / login */
        GridPane textFields = new GridPane();
        textFields.setAlignment(Pos.CENTER);
        textFields.setPadding(new Insets(20.0,20.0,20.0,20.0));
        textFields.setHgap(10);
        textFields.setVgap(10);
        
		/* Initial menu setup */
        textFields.add(menuModeLabel, 0, 2);
        textFields.add(userNameInput, 0, 4);
        
        textFields.add(passwordInput, 0, 6);
        
        textFields.add(loginBtn, 0, 8); 
        GridPane.setHalignment(loginBtn, HPos.RIGHT);

        textFields.add(leftLine, 0, 12);
        GridPane.setHalignment(leftLine, HPos.LEFT);
        textFields.add(orLabel, 0, 12);
        GridPane.setHalignment(orLabel, HPos.CENTER);
        textFields.add(rightLine, 0, 12);
        GridPane.setHalignment(rightLine, HPos.RIGHT);
        
        textFields.add(signUpBtn, 0, 15);
        GridPane.setHalignment(signUpBtn, HPos.CENTER);
         
        /* Opens the registration questionnaire */
        signUpBtn.setOnAction(actionEvent ->{
        	//loginScreen = false; //i.e the registration menu is open
        	
            /* Clear everything */
            userNameInput.clear();
            passwordInput.clear();
            textFields.getChildren().clear();
            messages.setVisible(false);
            
            /* Change menu title and button*/
        	menuModeLabel.setText("Sign up");
        	textFields.add(menuModeLabel, 0, 0);
            
            /* Placing labels and text fields on GridPane (name, column, row) */
            textFields.add(userNameInput, 0, 2 );
            
            GridPane.setHalignment(passwordInput, HPos.RIGHT);
            textFields.add(passwordInput, 0, 3);
            
            textFields.add(repeatedPasswordInput,0,4);
            GridPane.setHalignment(repeatedPasswordInput, HPos.RIGHT);
            
            textFields.add(emailInput,0,5);
            
            textFields.add(registerBtn, 0, 6);
            registerBtn.setPrefSize(100, fieldHeight);
            GridPane.setHalignment(registerBtn, HPos.RIGHT);
            
            textFields.add(leftLine, 0, 9);
            GridPane.setHalignment(leftLine, HPos.LEFT);
            textFields.add(orLabel, 0, 9);
            GridPane.setHalignment(orLabel, HPos.CENTER);
            textFields.add(rightLine, 0, 9);
            GridPane.setHalignment(rightLine, HPos.RIGHT);
            
            textFields.add(signInBtn, 0, 11);
            signInBtn.setPrefSize(fieldWidth, fieldHeight);

            // BUTTON INTERACTIONS \\
            
            /* Button sends data to the database */
            registerBtn.setOnAction(event -> {
                /*Creating string variables from the user input in the text field to be able to..
                send them to the UserHandler class to check validity.
                 */

                String usernameOut = userNameInput.getText();
                String passwordOut = passwordInput.getText();
                String emailOut = emailInput.getText();
                String repeatedPasswordOut = repeatedPasswordInput.getText();

                
                /*

                Creating "if" statements to check the information provided by the user to register are valid according
                to the UserHandler and User classes where more information about the used methods can be found.
                if something is wrong an alert will be shown stating what which entry was wrong.

                 */
                if(UserHandler.verifyFields(usernameOut,passwordOut,emailOut,repeatedPasswordOut) && UserHandler.checkUsername(usernameOut) && User.isUserValid(usernameOut) && User.isPasswordValid(passwordOut)) {
                    UserHandler.addUser(usernameOut,passwordOut,emailOut,repeatedPasswordOut );
                    messages.setText("Account was succesfully created!");
					
					/* Reset credential fields */
					userNameInput.setText("");
					passwordInput.setText("");
					repeatedPasswordInput.setText("");
					emailInput.setText("");
					messages.setVisible(true);
                }
                
                else if(!UserHandler.checkUsername(usernameOut)) {
                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setTitle("Information Dialog");
                    alert.setHeaderText(null);
                    alert.setContentText("Username is already taken.. Try another one!");
                    alert.showAndWait();
                }
                
                if(!UserHandler.verifyFields(usernameOut,passwordOut,emailOut,repeatedPasswordOut)){
                    Alert errorAlert = new Alert(Alert.AlertType.WARNING);
                    errorAlert.setHeaderText("Information Dialog");
                    errorAlert.setContentText("One or more fields may be empty");
                    errorAlert.showAndWait();
                }

                if (!UserHandler.checkPassword(passwordOut,repeatedPasswordOut)){
                    Alert alert = new Alert(Alert.AlertType.WARNING);
                    alert.setTitle("Information Dialog");
                    alert.setHeaderText(null);
                    alert.setContentText("Passwords do not match!");
                    alert.showAndWait();
                }
                
                if(!User.isPasswordValid(passwordOut)){
                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setTitle("Information Dialog");
                    alert.setHeaderText(null);
                    alert.setContentText("The password must be at least 5 characters long");
                    alert.showAndWait();
                }
                
                if (!User.isUserValid(usernameOut)){
                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setTitle("Information Dialog");
                    alert.setHeaderText(null);
                    alert.setContentText("The username must be at least 3 characters long");
                    alert.showAndWait();
                }
                
                /*
	            UserHandler.addUser(usernameOut,passwordOut,emailOut,repeatedPasswordOut );
	            if(!UserHandler.verifyFields(usernameOut,passwordOut,emailOut,repeatedPasswordOut)) {
	
	                Alert errorAlert = new Alert(Alert.AlertType.INFORMATION);
	                errorAlert.setHeaderText("Information Dialog");
	                errorAlert.setContentText("Something went wrong please check your input one more time and try again!\n " +
	                        "fields may be empty or the passwords don't match ");
	                errorAlert.showAndWait();
	            }
	           if(!UserHandler.checkUsername(usernameOut)){
	                Alert alert = new Alert(Alert.AlertType.INFORMATION);
	                alert.setTitle("Information Dialog");
	                alert.setHeaderText(null);
	                alert.setContentText("Username is already taken.. Try another one!");
	
	                alert.showAndWait();
	            }*/
	
	                // messages.setText("Text area for any kind of messages like errors or something else - your password is wrong dude");
	                //registration process, checking password, username and whole crap
	                //need connection to database
                
            });
        });
        
        /* Opens the sign in questionnaire */
        signInBtn.setOnAction(actionEvent -> {

            /* Clear everything */
            userNameInput.clear();
            passwordInput.clear();
            repeatedPasswordInput.clear();
            emailInput.clear();
            textFields.getChildren().clear();
            messages.setVisible(false);

        	/* Change menu title, Buttons and TextFields*/
        	menuModeLabel.setText("Sign in");

        	textFields.add(menuModeLabel, 0, 2);
            textFields.add(userNameInput, 0, 4);
            textFields.add(passwordInput, 0, 6);
            textFields.add(loginBtn, 0, 8); 
            loginBtn.setPrefSize(100, 35);
            GridPane.setHalignment(signInBtn, HPos.RIGHT);

            textFields.add(leftLine, 0, 12);
            GridPane.setHalignment(leftLine, HPos.LEFT);
            textFields.add(orLabel, 0, 12);
            GridPane.setHalignment(orLabel, HPos.CENTER);
            textFields.add(rightLine, 0, 12);
            GridPane.setHalignment(rightLine, HPos.RIGHT);
            
            textFields.add(signUpBtn, 0, 15);
            GridPane.setHalignment(signUpBtn, HPos.CENTER);

        });
        
        /* Button sends data to the database */
        loginBtn.setOnAction(event -> {
        	
        	/* NEEDS TO CHECK USER INFO BEFORE LOGGING IN */

        		
        		String usernameOut = userNameInput.getText();
	            String passwordOut = passwordInput.getText();
	            if(UserHandler.logIn(usernameOut,passwordOut)&&UserHandler.checkAdmin(usernameOut)==1) {
	                setIsAdmin(1);
	                setIsLogged(1);
	                setCurrentUserName(userNameInput.getText()); //Stores the currently signed in users name.
                    //if logged in successfully set the userID to be able to access it during the session
                    setUserID(UserHandler.checkUserId(usernameOut));


                  //  userNameInput.setText("");
                  //  passwordInput.setText("");

                    /* *
                     * Since a successful login should reasonably bring the user
                     * back to the main menu this message change might not be necessary.
                     */
                    //messages.setText("Successfully logged in!");
                    //messages.setVisible(true);

                    /* *
                     * Returns the user to the main menu if the login attempt was successful.
                     * (The information from this login/database communication should be used
                     * when considering this users privileges and so on).
                     *
                     * There should also perhaps be a change made to the "Sign in" in the upper
                     * right corner of the main menu to instead display the currently logged in
                     * user's name and perhaps also a "Log out" and/or "Change account".
                     * */

                    try {
                        MainMenu.backToMainMenu();
                    } catch (FileNotFoundException  e) {
                        e.printStackTrace();
                    }

                }
	            else if(UserHandler.logIn(usernameOut,passwordOut)&& UserHandler.checkAdmin(usernameOut)==0){
                    setIsLogged(1);
                    setUserID(UserHandler.checkUserId(usernameOut));
	                setCurrentUserName(userNameInput.getText()); //Stores the currently signed in users name.

                    try {
                        MainMenu.backToMainMenu();
                    } catch (FileNotFoundException  e) {
                        e.printStackTrace();
                    }
                }

	            else if(userNameInput.getText().isEmpty() || passwordInput.getText().isEmpty() || 
	            		userNameInput.getText().isEmpty() && passwordInput.getText().isEmpty()){
	            	 messages.setText("One or more fields are empty!");
	                 messages.setVisible(true);
	            }
	            
	            else if (UserHandler.checkUsername(usernameOut)){
	            	userNameInput.setText("");
	            	passwordInput.setText("");
	                messages.setText("Username does not exist please sing up!");
                    messages.setVisible(true);
                }
	            else {
	            	passwordInput.setText("");
                    messages.setText("The password is wrong try again!");
                    messages.setVisible(true);
                }
            

            });
        
        /* Sends the user back to the main menu when pressed */
       mainMenuBtn.setOnAction(actionEvent -> {
        	try {
                MainMenu.backToMainMenu();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        });
        
        
		/* Login/SignUp title & Respective TextField's & Buttons*/
		VBox signInField = new VBox(textFields);
		
		/* Stylized left hand side of the menu */
		HBox emptySpace = new HBox();
		emptySpace.setPadding(new Insets(175, 0, 0, 0));
		
		VBox menuBtn = new VBox(mainMenuBtn);
		menuBtn.setPadding(new Insets(0, 0, 35, 0));
		menuBtn.setAlignment(Pos.BASELINE_CENTER);
		
        VBox leftSide = new VBox(menuBtn, title, emptySpace, messages);
        leftSide.setPadding(new Insets(10, 10, 0, 10));
        leftSide.setStyle("-fx-background-color: #587dd1"); //Sets the background color to blue.
        leftSide.setSpacing(10);
        leftSide.setMaxWidth(220);
        leftSide.setPrefHeight(480);
        
		HBox allContent = new HBox(leftSide, signInField);
		allContent.setSpacing(100);
		
		
		/* The scene's root*/
		VBox root = new VBox(allContent);
		root.setAlignment(Pos.BASELINE_LEFT);

		/* Used for local instances of ONLY the UserMain menu.
		Scene logRegistrationScene = new Scene (root);
        logRegStage.setTitle("Account Creator"); //Not sure what to call this window.
        logRegStage.setScene(logRegistrationScene);
        logRegStage.setWidth(640);
        logRegStage.setHeight(480);
        logRegStage.setResizable(false);
        logRegStage.show();*/
		
        Scene outputScene = new Scene(root);
        return outputScene;
	}
}
