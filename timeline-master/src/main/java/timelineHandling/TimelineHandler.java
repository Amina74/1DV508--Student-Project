package timelineHandling;



import main.UserMain;
import timeLineDisplay.TimeLine;
import userHandling.ConnectionMaker;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class TimelineHandler {
    /**
     * addTimeline will take a timeline
     * it will check the user id (that owns the timeline)
     * then add the title, start and end date provided from the user in the creation menu
     *
     * @param timeLine
     * @author Amin Marteni
     */

    public static void addTimeline(TimeLine timeLine) {
        String timelineTitle = timeLine.getTitle();
        int userID = UserMain.getUserID();
        // int userID =1; //temporary for testing
        String timelineStartDate = timeLine.getStartDate();
        String timelineEndDate = timeLine.getEndDate();
        String timelineKeyword = timeLine.getKeyword();

        //We should add events in here maybe rather than in their own class because
        // in their code they go hand in hand with creating the timeline.
        //Box[] events = timeLine.getBoxes();

        //Initializing SQL insert statement as a String .
        String sql = "insert into timelines (timeline_title, fk_user_id, start_date, end_date, timeline_keywords)";
        sql += "values (?,?,?,?,?)";
        try {
            //Creating a statement from the class ConnectionMaker and sending the insert statement there.
            PreparedStatement ps = ConnectionMaker.prepareStatement(sql);

            //Setting the variables in there order in the statement.
            ps.setString(1, timelineTitle);
            ps.setInt(2, userID);
            ps.setString(3, timelineStartDate);
            ps.setString(4, timelineEndDate);
            ps.setString(5,timelineKeyword);

            //executing the update then closing the statement
            ps.executeUpdate();
            ps.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }

    }


    /**
     * viewTimelineList will check the database for timeline titles and return it
     * according to the user and what timelines they have
     *
     * @return list with the names of timelines for an owner
     * @throws SQLException
     * @author Amin Marteni
     */
    public static ArrayList<String> viewTimelineList() throws SQLException {

        // Declare a PreparedStatement and a ResultSet
        PreparedStatement st;
        ResultSet rs = null;
        int userID = UserMain.getUserID();
        //to test we just take a fixed userID
        // int userID = 1;

        //Initializing SQL insert statement as a String .
        String sql = "select timeline_title from timelines  where fk_user_id = ?";


        //Establishing connection to the server via ConnectionMaker
        st = ConnectionMaker.prepareStatement(sql);
        st.setInt(1, userID);

        //Executing the statement to get a result set
        rs = st.executeQuery();

        ArrayList<String> timelineTitle = new ArrayList<>();

        while (rs.next()) {
            timelineTitle.add(rs.getString("timeline_title"));
        }
        return timelineTitle;
    }

    /**
     * When a timeline is chosen from the list generated by the method
     * viewTimelineList ()
     * a timeline will be created in the background from the information in the database
     * and then will be returned
     *
     * @return a timeline from the data base.
     * @author Amin Marteni
     */
    public static TimeLine viewTimeline(String timelineTitle) throws SQLException {
        PreparedStatement st;
        ResultSet rs = null;

        //Initializing SQL insert statement as a String .
        String sql = "select start_date, end_date, timeline_id from timelines where timeline_title = ?";

        //Establishing connection to the server via ConnectionMaker
        st = ConnectionMaker.prepareStatement(sql);
        st.setString(1, timelineTitle);

        rs = st.executeQuery();

        String timelineStartDate = null;
        String timelineEndDate = null;
        int timelineID = 0;
        while (rs.next()) {
            timelineStartDate = rs.getString("start_date");
            timelineEndDate = rs.getString("end_date");
            timelineID = rs.getInt("timeline_id");
        }
        TimeLine timeline = new TimeLine(timelineStartDate, timelineEndDate, timelineTitle, timelineID);
        return timeline;
    }

    public static void deleteTimeline(String title) {
        //int userId = UserHandler.checkUserId(username);

        try {
                /* SQL statement that will be sent to the database to delete both timeline and every event that belongs to that specific timeline. We do this by
                using the foreign key.*/
            String timeline = "Delete from timelines where timeline_id =? ";
            String events = "Delete from events where fk_timeline_id=?";

            //Establishing a connection with the database and sending the statement.
            PreparedStatement psTimeline = ConnectionMaker.prepareStatement(timeline);
            PreparedStatement psEvent = ConnectionMaker.prepareStatement(events);

            //Setting the parameters in the statement
            psTimeline.setInt(1, checkTimelineId(title));
            psEvent.setInt(1, checkTimelineId(title));

            //Executing the statement.
            psEvent.execute();
            psTimeline.execute();

            //Closing the statements.
            psEvent.close();
            psTimeline.close();

        } catch(SQLException e){
            e.printStackTrace();
        }
    }
    public static int checkTimelineId(String title) {
        ResultSet rs = null;
        try {
            String sql = "SELECT timeline_id FROM timelines WHERE timeline_title=?";        //Select the chosen timeline ID for the title you want to handle.

            PreparedStatement ps = ConnectionMaker.prepareStatement(sql);       //Establish connection with database and send statement.
            ps.setString(1, title);     //Add title value as a parameter.
            rs = ps.executeQuery();     //Execute statement.

            int id;     //Create int which will contain the id value.

            while (rs.next()){      //Loop through the column inside the table to find the title and return it's id.
                id=rs.getInt("timeline_id");
                return id;      //return id
            }
            ps.close(); //Close statement.
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return 0;      //If not then return 0.
    }
    /**
     * searching a timeline by String keyword.
     * the search return an arraylist of any timeline title contain the keyword
     * @return timelineTitle
     * @author Roubal Saker
     */
    public static ArrayList <String> searchTimeline(String keyWord) throws Exception {
        int userID =UserMain.getUserID();
        PreparedStatement st;
        ResultSet rs;

        //String keyword = "tes";// used for test only safe to delete. Robal

        //Initializing SQL Select statement from table user as a String & search for keyword start with ? .
        String sql = "SELECT * FROM timelines WHERE timeline_title LIKE ? and fk_user_id=? or timeline_keywords LIKE ? and fk_user_id=?";

        st = ConnectionMaker.prepareStatement(sql);

        st.setString(1, "%" + keyWord + "%");
        st.setInt(2,userID);
        st.setString(3, "%" + keyWord + "%");
        st.setInt(4,userID);

        rs = st.executeQuery();

        ArrayList<String> timelineTitle = new ArrayList<>();
        //While will give a list of all results
        while (rs.next()) {
            timelineTitle.add(rs.getString("timeline_title"));
        }
        return timelineTitle;

    }
    /**
     * When creating a timeline an optional keyword can be fill in.
     * @author Roubal Saker
     */
    public static void addKeyword(String keyWord, String timelineTitle) {


        String sql = "update timelines set timeline_keywords=? where timeline_title = ? ";

        try {
            //Creating a statement from the class ConnectionMaker and sending the insert statement there.
            PreparedStatement ps = ConnectionMaker.prepareStatement(sql);

            //Setting the variables in there order in the statement.
            ps.setString(1, keyWord);
            ps.setString(2,timelineTitle);



            //executing the update then closing the statement
            ps.executeUpdate();
            ps.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    /**
     * updating and adding more keywords to the already existing ones
     * by checking the database then appending the new changes to the old keywords!!
     * @param keyword
     * @param timelineTitle
     */
    public static void updateKeyword(String keyword, String timelineTitle){
        String getOldKeyword ="Select timeline_keywords from timelines where timeline_title = ?";
        try {
            PreparedStatement getPS = ConnectionMaker.prepareStatement(getOldKeyword);
            ResultSet rs;
            getPS.setString(1, timelineTitle);
            rs = getPS.executeQuery();

            StringBuilder sb = new StringBuilder();
            ArrayList<String> keywordList = new ArrayList();
            //String keywordString = rs.getString("timeline_keywords");

            //TEMPORARY
            if(rs.next()) {
                String keywordString = rs.getString("timeline_keywords");
                if(keywordString==null){  //add keywords when the result set is empty
                    addKeyword(keyword,timelineTitle);

                }
                else{   //add keywords when the result set is not empty
                sb.append(keywordString);
                int prevWordEndIndex = -1; //The end position (index) of the previous keyword (i.e. ex. Spac"e" would be "e" on the index 4).

                /* Splits the string returned from the ResultSet into it's subcomponents (Keywords)
                 * and adds them to an ArrayList
                 */

                    for (int i = 0; i < keywordString.length(); i++) {
                        if (keywordString.charAt(i) == ',' && keywordString.charAt(i + 1) == ' ' && keywordString.charAt(i + 2) == ' ') {

                            //keywordList.add(keywordString.substring(prevWordEndIndex + 1, i));

                            // String str = keywordString.substring(prevWordEndIndex + 1, i);
                            //System.out.println(str); //Used for debugging

                            //prevWordEndIndex = i;
                            sb.append(keyword);
                            break;
                        } else {
                            //what if there is no ','??? and there is only one
                            sb.append("," + keyword);
                            break;
                        }
                    }

                    //System.out.println("\nList:\n" + keywordList); //Used for debugging

                    /* Appends all of the keywords to a StringBuilder (followed by a comma) */
                    // for (String s : keywordList) {
                    //    sb.append(s + ",");
                    //}

                    /* Adds the user keyword input at the end and then sets the input to be the entire keyword String */
                    // sb.append(keyword);
                    keyword = sb.toString();
                    addKeyword(keyword, timelineTitle);
                }
            }


        }catch (SQLException e){
            e.printStackTrace();
        }

    }


    /***
     * Updates a specific timeline's title in the SQL database
     * @param title The new title of the timeline
     * @param timelineID The ID of the timeline
     */
    public static void updateTimelineTitle(String title, int timelineID){
        try {
            // SQL statement that will be sent to the database to update the timeline title
            String sql = "UPDATE timelines SET timeline_title=? WHERE timeline_id=?";

            //Establishing a connection with the database and sending the statement.
            PreparedStatement ps = ConnectionMaker.prepareStatement(sql);

            // 3. Set the parameters
            ps.setString(1, title);
            ps.setInt(2, timelineID);
            ps.executeUpdate();
        } catch(SQLException e){

            e.printStackTrace();
        }

    }

}

